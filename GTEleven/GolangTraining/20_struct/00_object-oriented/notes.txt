Go is Object Oriented

(1) Encapsulation
state ("fields")
behavior ("methods")
exported / un-exported

(2) Reusabilty
inheritence ("embedded types")

(3) Polymorphism
interfsaces

(4) Overriding
"promotion"

//////////////
Traditional OOP

Classes
-- data structure describing a type of object
-- you can then create "instances"/"objects" from the class/blue-print
-- classes hold both:
==== state / data / fields
==== behavior / methods
-- Public / private

Inhertence

//////////////
In go:
- you don't create classes, create a byte
- you don't instantiate, you create a value of a type

